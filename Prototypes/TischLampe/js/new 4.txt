  							
			raycaster.setFromCamera( new THREE.Vector2( 0.5, 0.5 ), camera );	

	//scene.add( new THREE.ArrowHelper(new THREE.Vector2( 0.5, 0.5 ), camera.position, 50, 0x000000));
//scene.add( new THREE.ArrowHelper(direction, origin, 50, 0x000000));
			// calculate objects intersecting the picking ray
			var intersects = raycaster.intersectObject(scene.children,true);

			if(intersects >= 1){
						console.log(intersects[0].toString());
				
			}

		
		
		for (var j=0; j < visinaTravce.length; j++){
        if (visinaTravce[j].object.name == "tla"){
                pozTravcey = visinaTravce[j].distance; //plovc.ray.origin.distanceTo(visinaTravce[0].point);
            point = visinaTravce[j].point;
            console.log("razdalja je: ",visinaTravce[j].point.y);
			
			
			

	function raycast() {
		raycaster.set(camera.getWorldPosition(),camera.getWorldDirection());	
		
		//Raycaster helper - displays raycaster as vector
		//scene.remove (arrow);
		//arrow = new THREE.ArrowHelper( camera.getWorldDirection(), camera.getWorldPosition(), 100, 0x00ffff );
		//scene.add( arrow );

		var intersects = raycaster.intersectObjects( scene.children );

			for ( var i = 0; i < intersects.length; i++ ) {
				try{
					if(intersects[i].object.name.length >= 1 && intersects[i].distance <= 5){
						console.log( intersects[i].object.name + ": distance:" + intersects[i].distance );
						if(intersects[i].object.userData.info.length >=1){
						console.log( intersects[i].object.userData.info);
						}
					}
					}catch(err){
					}
				}
		}